/*
 * eChallan System
 * ### API Specs For eChallan System ### 1. Generate the new challan. 2. Update the details of existing challan 3. Search the existing challan 4. Generate the demand and bill for the challan amount so that collection can be done in online and offline mode. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@egovernments.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.egov.echallan.model;

import java.math.BigDecimal;
import java.util.List;

import jakarta.validation.Valid;

import org.egov.echallan.web.models.calculation.Calculation;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Capture the challan details 
 */

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class Challan {

  @JsonProperty("citizen")
  private UserInfo citizen ;

  @JsonProperty("id")

  private String id ;

  @JsonProperty("tenantId")

  private String tenantId ;

  @JsonProperty("businessService")

  private String businessService ;

  @JsonProperty("challanNo")

  private String challanNo ;

  @JsonProperty("referenceId")

  private String referenceId ;

  @JsonProperty("description")

  private String description ;

  @JsonProperty("accountId")

  private String accountId ;

  @JsonProperty("additionalDetail")

  private Object additionalDetail ;

  @JsonProperty("source")

  private String source ;
  
  @JsonProperty("taxPeriodFrom")
  private Long taxPeriodFrom ;

  @JsonProperty("taxPeriodTo")
  private Long taxPeriodTo ;

  @JsonProperty("calculation")
  private Calculation calculation;
  
  @JsonProperty("amount")
  private List<Amount> amount;

  @JsonProperty("address")

  private Address address ;
  
  @JsonProperty("filestoreid")

  private String filestoreid ;

  @JsonProperty("auditDetails")

  private AuditDetails auditDetails;
  public Challan citizen(UserInfo citizen) {
    this.citizen = citizen;
    return this;
  }

  public enum StatusEnum {
	  ACTIVE("ACTIVE"),

	  CANCELLED("CANCELLED"),

	  PAID("PAID");

      private String value;

      StatusEnum(String value) {
          this.value = value;
      }

      @Override
      @JsonValue
      public String toString() {
          return String.valueOf(value);
      }

      @JsonCreator
      public static StatusEnum fromValue(String text) {
          for (StatusEnum b : StatusEnum.values()) {
              if (String.valueOf(b.value).equals(text)) {
                  return b;
              }
          }
          return null;
      }
  }

  @JsonProperty("applicationStatus")
  private StatusEnum applicationStatus;
  
	// Expense fields
	@JsonProperty("vendor")

	private String vendor ;

	@JsonProperty("typeOfExpense")

	private String typeOfExpense ;

	@JsonProperty("billDate")
	private Long billDate ;

	@JsonProperty("billIssuedDate")
	private Long billIssuedDate;

	@JsonProperty("paidDate")
	private Long paidDate ;

	@JsonProperty("isBillPaid")
	private Boolean isBillPaid;
	
	@JsonProperty("vendorName")
	private String vendorName;
	
	@JsonProperty("totalAmount")
	private BigDecimal totalAmount;
}
